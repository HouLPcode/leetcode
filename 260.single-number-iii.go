/*
 * @lc app=leetcode id=260 lang=golang
 *
 * [260] Single Number III
 */
//[-1638685546,-2084083624,-307525016,-930251592,-1638685546,1354460680,623522045,-1370026032,-307525016,-2084083624,-930251592,472570145,-1370026032,1063150409,160988123,1122167217,1145305475,472570145,623522045,1122167217,1354460680,1145305475]
//[1193730082,587035181,-814709193,1676831308,-511259610,284593787,-2058511940,1970250135,-814709193,-1435587299,1308886332,-1435587299,1676831308,1403943960,-421534159,-528369977,-2058511940,1636287980,-1874234027,197290672,1976318504,-511259610,1308886332,336663447,1636287980,197290672,1970250135,1976318504,959128864,284593787,-528369977,-1874234027,587035181,-421534159,-786223891,933046536,959112204,336663447,933046536,959112204,1193730082,-786223891]
func singleNumber(nums []int) []int {
	a_b := 0
	// 得到a^b的结果
	for i:=0; i<len(nums); i++{
		a_b ^= nums[i]
	}
	// 取a^b不为0的某一位，此处取最后一位
	a := 0
	lastbit := a_b & -a_b // 得到最低位的1的数值
	for i:=0; i<len(nums); i++{
		if nums[i] & lastbit != 0 { // 所有第k位不为0的数异或
			a ^= nums[i]
		}
	}
	return []int{a, a_b^a}
}

