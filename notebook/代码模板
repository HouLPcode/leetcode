1. BFS
    func BFS(graph,start,end){
        queue = new queue
        visited := make(map[node]bool)
        queue.push(graph(start))
        visited[graph(start)] = true

        for !queue.Isempty(){
            node := queue.Pop()
            visited[node] = true
            
            //处理node节点信息

            nodes := node.Childens()//所有未访问的相关节点入队
            queue.Push(nodes)
        }
    }

2. DFS

visited := make(map[TreeNode]bool)
func dfs(root *Treenode, visited){
    visited[root] = true

    // 处理当前节点，root

    for nodes := range root.Childens(){
        if _,ok := visited[nodes]; !ok{
            dfs(nodes,visited)
        }
    }
}

3. 二分查找
    func BinSearch(array []int, target int){
        if len(array) == 0{
            return 
        }
        left, right := 0, len(array)-1
        for left <= right{ // 注意是小于等于
            mid := left + (right - left) / 2 //注意，这样防止越界
            if array[mid] == target{
                break or return mid
            }else if array[mid] < target{
                left = mid + 1 // 注意，此处需要 +1
            }else{
                right = mid -1
            }
        }
    }

